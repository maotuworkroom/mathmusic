{"version":3,"sources":["../web-assembly/pkg/synthesis.js"],"names":["__webpack_require__","r","__webpack_exports__","d","greet","synthesize_composition","__wbg_alert_95e4cbcd649c0241","passStringToWasm","_synthesis_bg__WEBPACK_IMPORTED_MODULE_0__","WASM_VECTOR_LEN","cachedTextEncoder","TextEncoder","cachegetUint8Memory","getUint8Memory","buffer","Uint8Array","name","ptr0","len0","encodeInto","arg","size","length","ptr","offset","mem","code","charCodeAt","slice","view","subarray","written","buf","encode","set","cachegetFloat32Memory","getArrayF32FromWasm","len","Float32Array","cachedGlobalArgumentPtr","cachegetUint32Memory","composition_json","settings_json","ptr1","len1","retptr","Uint32Array","rustptr","rustlen","realRet","cachedTextDecoder","TextDecoder","arg0","arg1","varg0","decode","alert"],"mappings":"2FAAAA,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,0BAAAE,IAAAJ,EAAAG,EAAAD,EAAA,2CAAAG,IAAAL,EAAAG,EAAAD,EAAA,iDAAAI,IAAA,IAaAC,EAbAC,EAAAR,EAAA,MACAS,EAAA,EACAC,EAAA,IAAAC,YAAA,SACAC,EAAA,KAEA,SAAAC,IAKA,OAJA,OAAAD,KAAAE,SAAqEN,EAAA,EAAWM,SAChFF,EAAA,IAAAG,WAAyCP,EAAA,EAAWM,SAGpDF,EAmEO,SAAAR,EAAAY,GACP,IAAAC,EAAAV,EAAAS,GACAE,EAAAT,EAEA,IACA,OAAWD,EAAA,EAAUS,EAAAC,GAClB,QACCV,EAAA,EAAoBS,EAAA,EAAAC,IApExBX,EADA,oBAAAG,EAAAS,WACA,SAAAC,GASA,IARA,IAAAC,EAAAD,EAAAE,OAEAC,EAAcf,EAAA,EAAsBa,GAEpCG,EAAA,EAEAC,EAAAZ,IAEYW,EAAAJ,EAAAE,OAAqBE,IAAA,CACjC,IAAAE,EAAAN,EAAAO,WAAAH,GACA,GAAAE,EAAA,UACAD,EAAAF,EAAAC,GAAAE,EAIA,GAAAF,IAAAJ,EAAAE,OAAA,CACAF,IAAAQ,MAAAJ,GACAD,EAAYf,EAAA,EAAuBe,EAAAF,IAAAG,EAAA,EAAAJ,EAAAE,QACnC,IAAAO,EAAAhB,IAAAiB,SAAAP,EAAAC,EAAAD,EAAAF,GAEAG,GADAd,EAAAS,WAAAC,EAAAS,GACAE,QAIA,OADAtB,EAAAe,EACAD,GAGA,SAAAH,GASA,IARA,IAAAC,EAAAD,EAAAE,OAEAC,EAAcf,EAAA,EAAsBa,GAEpCG,EAAA,EAEAC,EAAAZ,IAEYW,EAAAJ,EAAAE,OAAqBE,IAAA,CACjC,IAAAE,EAAAN,EAAAO,WAAAH,GACA,GAAAE,EAAA,UACAD,EAAAF,EAAAC,GAAAE,EAIA,GAAAF,IAAAJ,EAAAE,OAAA,CACA,IAAAU,EAAAtB,EAAAuB,OAAAb,EAAAQ,MAAAJ,IACAD,EAAYf,EAAA,EAAuBe,EAAAF,IAAAG,EAAAQ,EAAAV,QACnCT,IAAAqB,IAAAF,EAAAT,EAAAC,GACAA,GAAAQ,EAAAV,OAIA,OADAb,EAAAe,EACAD,GAmBA,IAAAY,EAAA,KAUA,SAAAC,EAAAb,EAAAc,GACA,OARA,OAAAF,KAAArB,SAAyEN,EAAA,EAAWM,SACpFqB,EAAA,IAAAG,aAA6C9B,EAAA,EAAWM,SAGxDqB,GAIAL,SAAAP,EAAA,EAAAA,EAAA,EAAAc,GAGA,IAAAE,EAAA,KAUA,IAAAC,EAAA,KAgBO,SAAAnC,EAAAoC,EAAAC,GACP,IAAAzB,EAAAV,EAAAkC,GACAvB,EAAAT,EACAkC,EAAApC,EAAAmC,GACAE,EAAAnC,EACAoC,GA5BA,OAAAN,IACAA,EAA8B/B,EAAA,KAG9B+B,GAyBE/B,EAAA,EAA2BqC,EAAA5B,EAAAC,EAAAyB,EAAAC,GAC7B,IAAAnB,GApBA,OAAAe,KAAA1B,SAAuEN,EAAA,EAAWM,SAClF0B,EAAA,IAAAM,YAA2CtC,EAAA,EAAWM,SAGtD0B,GAiBAO,EAAAtB,EAAAoB,EAAA,GACAG,EAAAvB,EAAAoB,EAAA,KACAI,EAAAb,EAAAW,EAAAC,GAAApB,QAIA,OAFEpB,EAAA,EAAoBuC,EAAA,EAAAC,GAEtBC,EAEA,IAAAC,EAAA,IAAAC,YAAA,SAMO,IAAA7C,EAAA,SAAA8C,EAAAC,GACP,IALA9B,EAAAc,EAKAiB,GALA/B,EAKA6B,EALAf,EAKAgB,EAJAH,EAAAK,OAAA1C,IAAAiB,SAAAP,IAAAc,KAKAmB,MAAAF","file":"static/js/3.74e6e6a3.chunk.js","sourcesContent":["import * as wasm from './synthesis_bg';\nvar WASM_VECTOR_LEN = 0;\nvar cachedTextEncoder = new TextEncoder('utf-8');\nvar cachegetUint8Memory = null;\n\nfunction getUint8Memory() {\n  if (cachegetUint8Memory === null || cachegetUint8Memory.buffer !== wasm.memory.buffer) {\n    cachegetUint8Memory = new Uint8Array(wasm.memory.buffer);\n  }\n\n  return cachegetUint8Memory;\n}\n\nvar passStringToWasm;\n\nif (typeof cachedTextEncoder.encodeInto === 'function') {\n  passStringToWasm = function passStringToWasm(arg) {\n    var size = arg.length;\n\n    var ptr = wasm.__wbindgen_malloc(size);\n\n    var offset = 0;\n    {\n      var mem = getUint8Memory();\n\n      for (; offset < arg.length; offset++) {\n        var code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n      }\n    }\n\n    if (offset !== arg.length) {\n      arg = arg.slice(offset);\n      ptr = wasm.__wbindgen_realloc(ptr, size, size = offset + arg.length * 3);\n      var view = getUint8Memory().subarray(ptr + offset, ptr + size);\n      var ret = cachedTextEncoder.encodeInto(arg, view);\n      offset += ret.written;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n  };\n} else {\n  passStringToWasm = function passStringToWasm(arg) {\n    var size = arg.length;\n\n    var ptr = wasm.__wbindgen_malloc(size);\n\n    var offset = 0;\n    {\n      var mem = getUint8Memory();\n\n      for (; offset < arg.length; offset++) {\n        var code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n      }\n    }\n\n    if (offset !== arg.length) {\n      var buf = cachedTextEncoder.encode(arg.slice(offset));\n      ptr = wasm.__wbindgen_realloc(ptr, size, size = offset + buf.length);\n      getUint8Memory().set(buf, ptr + offset);\n      offset += buf.length;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n  };\n}\n/**\r\n* @param {string} name\r\n* @returns {void}\r\n*/\n\n\nexport function greet(name) {\n  var ptr0 = passStringToWasm(name);\n  var len0 = WASM_VECTOR_LEN;\n\n  try {\n    return wasm.greet(ptr0, len0);\n  } finally {\n    wasm.__wbindgen_free(ptr0, len0 * 1);\n  }\n}\nvar cachegetFloat32Memory = null;\n\nfunction getFloat32Memory() {\n  if (cachegetFloat32Memory === null || cachegetFloat32Memory.buffer !== wasm.memory.buffer) {\n    cachegetFloat32Memory = new Float32Array(wasm.memory.buffer);\n  }\n\n  return cachegetFloat32Memory;\n}\n\nfunction getArrayF32FromWasm(ptr, len) {\n  return getFloat32Memory().subarray(ptr / 4, ptr / 4 + len);\n}\n\nvar cachedGlobalArgumentPtr = null;\n\nfunction globalArgumentPtr() {\n  if (cachedGlobalArgumentPtr === null) {\n    cachedGlobalArgumentPtr = wasm.__wbindgen_global_argument_ptr();\n  }\n\n  return cachedGlobalArgumentPtr;\n}\n\nvar cachegetUint32Memory = null;\n\nfunction getUint32Memory() {\n  if (cachegetUint32Memory === null || cachegetUint32Memory.buffer !== wasm.memory.buffer) {\n    cachegetUint32Memory = new Uint32Array(wasm.memory.buffer);\n  }\n\n  return cachegetUint32Memory;\n}\n/**\r\n* @param {string} composition_json\r\n* @param {string} settings_json\r\n* @returns {Float32Array}\r\n*/\n\n\nexport function synthesize_composition(composition_json, settings_json) {\n  var ptr0 = passStringToWasm(composition_json);\n  var len0 = WASM_VECTOR_LEN;\n  var ptr1 = passStringToWasm(settings_json);\n  var len1 = WASM_VECTOR_LEN;\n  var retptr = globalArgumentPtr();\n  wasm.synthesize_composition(retptr, ptr0, len0, ptr1, len1);\n  var mem = getUint32Memory();\n  var rustptr = mem[retptr / 4];\n  var rustlen = mem[retptr / 4 + 1];\n  var realRet = getArrayF32FromWasm(rustptr, rustlen).slice();\n\n  wasm.__wbindgen_free(rustptr, rustlen * 4);\n\n  return realRet;\n}\nvar cachedTextDecoder = new TextDecoder('utf-8');\n\nfunction getStringFromWasm(ptr, len) {\n  return cachedTextDecoder.decode(getUint8Memory().subarray(ptr, ptr + len));\n}\n\nexport var __wbg_alert_95e4cbcd649c0241 = function __wbg_alert_95e4cbcd649c0241(arg0, arg1) {\n  var varg0 = getStringFromWasm(arg0, arg1);\n  alert(varg0);\n};"],"sourceRoot":""}